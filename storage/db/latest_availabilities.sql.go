// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: latest_availabilities.sql

package db

import (
	"context"
	"database/sql"
)

const addLatestAvailability = `-- name: AddLatestAvailability :exec
INSERT INTO latest_availabilities (
    tour_uuid,
    recorded_at,
    availability_date,
    raw_data
) VALUES (?, datetime('now'), ?, ?)
`

type AddLatestAvailabilityParams struct {
	TourUuid         interface{}
	AvailabilityDate interface{}
	RawData          sql.NullString
}

func (q *Queries) AddLatestAvailability(ctx context.Context, arg AddLatestAvailabilityParams) error {
	_, err := q.db.ExecContext(ctx, addLatestAvailability, arg.TourUuid, arg.AvailabilityDate, arg.RawData)
	return err
}

const getLatestAvailability = `-- name: GetLatestAvailability :one
SELECT tour_uuid, recorded_at, availability_date, raw_data FROM latest_availabilities
WHERE tour_uuid = ? ORDER BY availability_date DESC LIMIT 1
`

func (q *Queries) GetLatestAvailability(ctx context.Context, tourUuid interface{}) (LatestAvailability, error) {
	row := q.db.QueryRowContext(ctx, getLatestAvailability, tourUuid)
	var i LatestAvailability
	err := row.Scan(
		&i.TourUuid,
		&i.RecordedAt,
		&i.AvailabilityDate,
		&i.RawData,
	)
	return i, err
}
