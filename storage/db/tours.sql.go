// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tours.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const deleteTour = `-- name: DeleteTour :exec
DELETE FROM tours
WHERE
    uuid = ?
`

func (q *Queries) DeleteTour(ctx context.Context, argUuid uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteTour, argUuid)
	return err
}

const getTour = `-- name: GetTour :one
SELECT
    uuid, name, link, api_url
FROM
    tours
WHERE
    uuid = ?
LIMIT
    1
`

func (q *Queries) GetTour(ctx context.Context, argUuid uuid.UUID) (Tour, error) {
	row := q.db.QueryRowContext(ctx, getTour, argUuid)
	var i Tour
	err := row.Scan(
		&i.Uuid,
		&i.Name,
		&i.Link,
		&i.ApiUrl,
	)
	return i, err
}

const listTours = `-- name: ListTours :many
SELECT
    uuid, name, link, api_url
FROM
    tours
`

func (q *Queries) ListTours(ctx context.Context) ([]Tour, error) {
	rows, err := q.db.QueryContext(ctx, listTours)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tour
	for rows.Next() {
		var i Tour
		if err := rows.Scan(
			&i.Uuid,
			&i.Name,
			&i.Link,
			&i.ApiUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertTour = `-- name: UpsertTour :exec
INSERT INTO
    tours (uuid, name, link, api_url)
VALUES
    (?, ?, ?, ?) ON CONFLICT (uuid) DO
UPDATE
SET
    name = EXCLUDED.name,
    link = EXCLUDED.link,
    api_url = EXCLUDED.api_url
`

type UpsertTourParams struct {
	Uuid   uuid.UUID
	Name   string
	Link   string
	ApiUrl string
}

func (q *Queries) UpsertTour(ctx context.Context, arg UpsertTourParams) error {
	_, err := q.db.ExecContext(ctx, upsertTour,
		arg.Uuid,
		arg.Name,
		arg.Link,
		arg.ApiUrl,
	)
	return err
}
